// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DevTKSS.MyManufacturerERP.Clients.Etsy.Models
{
    /// <summary>
    /// A property value for a specific product property, which may also employ a specific scale.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TaxonomyPropertyValue : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A list of numeric property value IDs this property value is equal to (if any).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? EqualTo { get; set; }
#nullable restore
#else
        public List<int?> EqualTo { get; set; }
#endif
        /// <summary>The name string of this property value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The numeric scale ID of the scale to which this property value belongs.</summary>
        public long? ScaleId { get; set; }
        /// <summary>The numeric ID of this property value.</summary>
        public long? ValueId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.TaxonomyPropertyValue"/> and sets the default values.
        /// </summary>
        public TaxonomyPropertyValue()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.TaxonomyPropertyValue"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.TaxonomyPropertyValue CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.TaxonomyPropertyValue();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "equal_to", n => { EqualTo = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "scale_id", n => { ScaleId = n.GetLongValue(); } },
                { "value_id", n => { ValueId = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<int?>("equal_to", EqualTo);
            writer.WriteStringValue("name", Name);
            writer.WriteLongValue("scale_id", ScaleId);
            writer.WriteLongValue("value_id", ValueId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
