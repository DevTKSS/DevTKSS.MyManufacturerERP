// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DevTKSS.MyManufacturerERP.Clients.Etsy.Models
{
    /// <summary>
    /// A transaction review record left by a User.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TransactionReview : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The numeric ID of the user who was the buyer in this transaction. Note: This field may be absent, depending on the buyer&apos;s privacy settings.</summary>
        public long? BuyerUserId { get; set; }
        /// <summary>The date and time the TransactionReview was created in epoch seconds.</summary>
        public int? CreatedTimestamp { get; set; }
        /// <summary>The date and time the TransactionReview was created in epoch seconds.</summary>
        public int? CreateTimestamp { get; set; }
        /// <summary>The url to a photo provided with the feedback, dimensions fullxfull. Note: This field may be absent, depending on the buyer&apos;s privacy settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrlFullxfull { get; set; }
#nullable restore
#else
        public string ImageUrlFullxfull { get; set; }
#endif
        /// <summary>The language of the TransactionReview</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>The ID of the ShopListing that the TransactionReview belongs to.</summary>
        public long? ListingId { get; set; }
        /// <summary>Rating value on scale from 1 to 5</summary>
        public int? Rating { get; set; }
        /// <summary>A message left by the author, explaining the feedback, if provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Review { get; set; }
#nullable restore
#else
        public string Review { get; set; }
#endif
        /// <summary>The shop&apos;s numeric ID.</summary>
        public long? ShopId { get; set; }
        /// <summary>The ID of the ShopReceipt Transaction that the TransactionReview belongs to.</summary>
        public long? TransactionId { get; set; }
        /// <summary>The date and time the TransactionReview was updated in epoch seconds.</summary>
        public int? UpdatedTimestamp { get; set; }
        /// <summary>The date and time the TransactionReview was updated in epoch seconds.</summary>
        public int? UpdateTimestamp { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.TransactionReview"/> and sets the default values.
        /// </summary>
        public TransactionReview()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.TransactionReview"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.TransactionReview CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.TransactionReview();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "buyer_user_id", n => { BuyerUserId = n.GetLongValue(); } },
                { "create_timestamp", n => { CreateTimestamp = n.GetIntValue(); } },
                { "created_timestamp", n => { CreatedTimestamp = n.GetIntValue(); } },
                { "image_url_fullxfull", n => { ImageUrlFullxfull = n.GetStringValue(); } },
                { "language", n => { Language = n.GetStringValue(); } },
                { "listing_id", n => { ListingId = n.GetLongValue(); } },
                { "rating", n => { Rating = n.GetIntValue(); } },
                { "review", n => { Review = n.GetStringValue(); } },
                { "shop_id", n => { ShopId = n.GetLongValue(); } },
                { "transaction_id", n => { TransactionId = n.GetLongValue(); } },
                { "update_timestamp", n => { UpdateTimestamp = n.GetIntValue(); } },
                { "updated_timestamp", n => { UpdatedTimestamp = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("buyer_user_id", BuyerUserId);
            writer.WriteIntValue("created_timestamp", CreatedTimestamp);
            writer.WriteIntValue("create_timestamp", CreateTimestamp);
            writer.WriteStringValue("image_url_fullxfull", ImageUrlFullxfull);
            writer.WriteStringValue("language", Language);
            writer.WriteLongValue("listing_id", ListingId);
            writer.WriteIntValue("rating", Rating);
            writer.WriteStringValue("review", Review);
            writer.WriteLongValue("shop_id", ShopId);
            writer.WriteLongValue("transaction_id", TransactionId);
            writer.WriteIntValue("updated_timestamp", UpdatedTimestamp);
            writer.WriteIntValue("update_timestamp", UpdateTimestamp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
