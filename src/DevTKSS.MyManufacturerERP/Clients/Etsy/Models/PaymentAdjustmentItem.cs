// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DevTKSS.MyManufacturerERP.Clients.Etsy.Models
{
    /// <summary>
    /// A payemnt adjustment line item for a payment adjustment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PaymentAdjustmentItem : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>String indicating the type of adjustment for this line item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdjustmentType { get; set; }
#nullable restore
#else
        public string AdjustmentType { get; set; }
#endif
        /// <summary>Integer value for the amount of the adjustment in original currency.</summary>
        public int? Amount { get; set; }
        /// <summary>Unique ID for the bill payment adjustment.</summary>
        public long? BillPaymentId { get; set; }
        /// <summary>The transaction&apos;s creation date and time, in epoch seconds.</summary>
        public int? CreatedTimestamp { get; set; }
        /// <summary>The numeric ID for a payment adjustment.</summary>
        public long? PaymentAdjustmentId { get; set; }
        /// <summary>Unique ID for the adjustment line item.</summary>
        public long? PaymentAdjustmentItemId { get; set; }
        /// <summary>Integer value for the amount of the adjustment in currency for the shop.</summary>
        public int? ShopAmount { get; set; }
        /// <summary>The unique numeric ID for a transaction.</summary>
        public long? TransactionId { get; set; }
        /// <summary>The update date and time the payment adjustment in epoch seconds.</summary>
        public int? UpdatedTimestamp { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.PaymentAdjustmentItem"/> and sets the default values.
        /// </summary>
        public PaymentAdjustmentItem()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.PaymentAdjustmentItem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.PaymentAdjustmentItem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.PaymentAdjustmentItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adjustment_type", n => { AdjustmentType = n.GetStringValue(); } },
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "bill_payment_id", n => { BillPaymentId = n.GetLongValue(); } },
                { "created_timestamp", n => { CreatedTimestamp = n.GetIntValue(); } },
                { "payment_adjustment_id", n => { PaymentAdjustmentId = n.GetLongValue(); } },
                { "payment_adjustment_item_id", n => { PaymentAdjustmentItemId = n.GetLongValue(); } },
                { "shop_amount", n => { ShopAmount = n.GetIntValue(); } },
                { "transaction_id", n => { TransactionId = n.GetLongValue(); } },
                { "updated_timestamp", n => { UpdatedTimestamp = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("adjustment_type", AdjustmentType);
            writer.WriteIntValue("amount", Amount);
            writer.WriteLongValue("bill_payment_id", BillPaymentId);
            writer.WriteIntValue("created_timestamp", CreatedTimestamp);
            writer.WriteLongValue("payment_adjustment_id", PaymentAdjustmentId);
            writer.WriteLongValue("payment_adjustment_item_id", PaymentAdjustmentItemId);
            writer.WriteIntValue("shop_amount", ShopAmount);
            writer.WriteLongValue("transaction_id", TransactionId);
            writer.WriteIntValue("updated_timestamp", UpdatedTimestamp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
