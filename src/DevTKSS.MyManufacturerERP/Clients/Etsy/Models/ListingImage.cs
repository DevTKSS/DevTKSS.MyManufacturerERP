// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DevTKSS.MyManufacturerERP.Clients.Etsy.Models
{
    /// <summary>
    /// Reference urls and metadata for an image associated with a specific listing. The `url_fullxfull` parameter contains the URL for full-sized binary image file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ListingImage : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Alt text for the listing image. Max length 500 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltText { get; set; }
#nullable restore
#else
        public string AltText { get; set; }
#endif
        /// <summary>The numeric red value equal to the image&apos;s average red value, from 0-255 (RGB color).</summary>
        public int? Blue { get; set; }
        /// <summary>The numeric brightness equal to the image&apos;s average brightness, from 0-100 (HSV color).</summary>
        public int? Brightness { get; set; }
        /// <summary>The listing image&apos;s creation time, in epoch seconds.</summary>
        public int? CreatedTimestamp { get; set; }
        /// <summary>The listing image&apos;s creation time, in epoch seconds.</summary>
        public int? CreationTsz { get; set; }
        /// <summary>The numeric height, measured in pixels, of the full-sized image referenced in url_fullxfull.</summary>
        public int? FullHeight { get; set; }
        /// <summary>The numeric width, measured in pixels, of the full-sized image referenced in url_fullxfull.</summary>
        public int? FullWidth { get; set; }
        /// <summary>The numeric red value equal to the image&apos;s average red value, from 0-255 (RGB color).</summary>
        public int? Green { get; set; }
        /// <summary>The webhex string for the image&apos;s average color, in webhex notation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HexCode { get; set; }
#nullable restore
#else
        public string HexCode { get; set; }
#endif
        /// <summary>The numeric hue equal to the image&apos;s average hue, from 0-360 (HSV color).</summary>
        public int? Hue { get; set; }
        /// <summary>When true, the image is in black &amp; white.</summary>
        public bool? IsBlackAndWhite { get; set; }
        /// <summary>The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.</summary>
        public long? ListingId { get; set; }
        /// <summary>The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.</summary>
        public long? ListingImageId { get; set; }
        /// <summary>The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.</summary>
        public int? Rank { get; set; }
        /// <summary>The numeric red value equal to the image&apos;s average red value, from 0-255 (RGB color).</summary>
        public int? Red { get; set; }
        /// <summary>The numeric saturation equal to the image&apos;s average saturation, from 0-100 (HSV color).</summary>
        public int? Saturation { get; set; }
        /// <summary>The url string for a 170x135 pixel thumbnail of the image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url170x135 { get; set; }
#nullable restore
#else
        public string Url170x135 { get; set; }
#endif
        /// <summary>The url string for a thumbnail of the image, no more than 570 pixels wide with variable height.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url570xN { get; set; }
#nullable restore
#else
        public string Url570xN { get; set; }
#endif
        /// <summary>The url string for a 75x75 pixel thumbnail of the image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url75x75 { get; set; }
#nullable restore
#else
        public string Url75x75 { get; set; }
#endif
        /// <summary>The url string for the full-size image, up to 3000 pixels in each dimension.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UrlFullxfull { get; set; }
#nullable restore
#else
        public string UrlFullxfull { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.ListingImage"/> and sets the default values.
        /// </summary>
        public ListingImage()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.ListingImage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.ListingImage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.ListingImage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alt_text", n => { AltText = n.GetStringValue(); } },
                { "blue", n => { Blue = n.GetIntValue(); } },
                { "brightness", n => { Brightness = n.GetIntValue(); } },
                { "created_timestamp", n => { CreatedTimestamp = n.GetIntValue(); } },
                { "creation_tsz", n => { CreationTsz = n.GetIntValue(); } },
                { "full_height", n => { FullHeight = n.GetIntValue(); } },
                { "full_width", n => { FullWidth = n.GetIntValue(); } },
                { "green", n => { Green = n.GetIntValue(); } },
                { "hex_code", n => { HexCode = n.GetStringValue(); } },
                { "hue", n => { Hue = n.GetIntValue(); } },
                { "is_black_and_white", n => { IsBlackAndWhite = n.GetBoolValue(); } },
                { "listing_id", n => { ListingId = n.GetLongValue(); } },
                { "listing_image_id", n => { ListingImageId = n.GetLongValue(); } },
                { "rank", n => { Rank = n.GetIntValue(); } },
                { "red", n => { Red = n.GetIntValue(); } },
                { "saturation", n => { Saturation = n.GetIntValue(); } },
                { "url_170x135", n => { Url170x135 = n.GetStringValue(); } },
                { "url_570xN", n => { Url570xN = n.GetStringValue(); } },
                { "url_75x75", n => { Url75x75 = n.GetStringValue(); } },
                { "url_fullxfull", n => { UrlFullxfull = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("alt_text", AltText);
            writer.WriteIntValue("blue", Blue);
            writer.WriteIntValue("brightness", Brightness);
            writer.WriteIntValue("created_timestamp", CreatedTimestamp);
            writer.WriteIntValue("creation_tsz", CreationTsz);
            writer.WriteIntValue("full_height", FullHeight);
            writer.WriteIntValue("full_width", FullWidth);
            writer.WriteIntValue("green", Green);
            writer.WriteStringValue("hex_code", HexCode);
            writer.WriteIntValue("hue", Hue);
            writer.WriteBoolValue("is_black_and_white", IsBlackAndWhite);
            writer.WriteLongValue("listing_id", ListingId);
            writer.WriteLongValue("listing_image_id", ListingImageId);
            writer.WriteIntValue("rank", Rank);
            writer.WriteIntValue("red", Red);
            writer.WriteIntValue("saturation", Saturation);
            writer.WriteStringValue("url_170x135", Url170x135);
            writer.WriteStringValue("url_570xN", Url570xN);
            writer.WriteStringValue("url_75x75", Url75x75);
            writer.WriteStringValue("url_fullxfull", UrlFullxfull);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
