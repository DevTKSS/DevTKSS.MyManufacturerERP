// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DevTKSS.MyManufacturerERP.Clients.Etsy.Models
{
    /// <summary>
    /// Represents a payment made with Etsy Payments. All monetary amounts are in USD pennies unless otherwise specified.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Payment : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The new fee amount after a seller refunds a payment, partially or fully.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money? AdjustedFees { get; set; }
#nullable restore
#else
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money AdjustedFees { get; set; }
#endif
        /// <summary>The gross payment amount after the seller refunds a payment, partially or fully.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money? AdjustedGross { get; set; }
#nullable restore
#else
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money AdjustedGross { get; set; }
#endif
        /// <summary>The total value of the payment after refunds, less fees (`adjusted_gross` - `adjusted_fees`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money? AdjustedNet { get; set; }
#nullable restore
#else
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money AdjustedNet { get; set; }
#endif
        /// <summary>An integer equal to the original card processing fee of the order in pennies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money? AmountFees { get; set; }
#nullable restore
#else
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money AmountFees { get; set; }
#endif
        /// <summary>An integer equal to gross amount of the order, in pennies, including shipping and taxes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money? AmountGross { get; set; }
#nullable restore
#else
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money AmountGross { get; set; }
#endif
        /// <summary>An integer equal to the payment value, in pennies, less fees (`amount_gross` - `amount_fees`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money? AmountNet { get; set; }
#nullable restore
#else
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money AmountNet { get; set; }
#endif
        /// <summary>The numeric ID identifying the billing address of the buyer.</summary>
        public int? BillingAddressId { get; set; }
        /// <summary>The currency string of the buyer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BuyerCurrency { get; set; }
#nullable restore
#else
        public string BuyerCurrency { get; set; }
#endif
        /// <summary>The numeric ID for the [user](/documentation/reference#tag/User) who paid the purchase.</summary>
        public long? BuyerUserId { get; set; }
        /// <summary>The transaction&apos;s creation date and time, in epoch seconds.</summary>
        public int? CreatedTimestamp { get; set; }
        /// <summary>The transaction&apos;s creation date and time, in epoch seconds.</summary>
        public int? CreateTimestamp { get; set; }
        /// <summary>The ISO (alphabetic) code string for the payment&apos;s currency.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.PaymentAdjustment>? PaymentAdjustments { get; set; }
#nullable restore
#else
        public List<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.PaymentAdjustment> PaymentAdjustments { get; set; }
#endif
        /// <summary>A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).</summary>
        public long? PaymentId { get; set; }
        /// <summary>The total value of the fees posted once the purchase ships. Etsy refunds a proportional amount of the fees when a seller refunds a buyer. When the seller issues a refund prior to shipping, the posted amount is less then the original.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money? PostedFees { get; set; }
#nullable restore
#else
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money PostedFees { get; set; }
#endif
        /// <summary>The total gross value of the payment posted once the purchase ships. This is equal to the `amount_gross` UNLESS the seller issues a refund prior to shipping. We consider &quot;shipping&quot; to be the event which &quot;posts&quot; to the ledger. Therefore, if the seller refunds first, we reduce the `amount_gross` first and post then that amount. The seller never sees the refunded amount in their ledger. This is equal to the &quot;Credit&quot; amount in the ledger entry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money? PostedGross { get; set; }
#nullable restore
#else
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money PostedGross { get; set; }
#endif
        /// <summary>The total value of the payment at the time of posting, less fees. (`posted_gross` - `posted_fees`)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money? PostedNet { get; set; }
#nullable restore
#else
        public global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money PostedNet { get; set; }
#endif
        /// <summary>The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.</summary>
        public long? ReceiptId { get; set; }
        /// <summary>The transaction&apos;s shipping date and time, in epoch seconds.</summary>
        public int? ShippedTimestamp { get; set; }
        /// <summary>The numeric id identifying the shipping address.</summary>
        public long? ShippingAddressId { get; set; }
        /// <summary>The numeric ID of the user to which the seller ships the order.</summary>
        public long? ShippingUserId { get; set; }
        /// <summary>The ISO (alphabetic) code for the shop&apos;s currency. The shop displays all prices in this currency by default.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShopCurrency { get; set; }
#nullable restore
#else
        public string ShopCurrency { get; set; }
#endif
        /// <summary>The unique positive non-zero numeric ID for an Etsy Shop.</summary>
        public long? ShopId { get; set; }
        /// <summary>A string indicating the current status of the payment, most commonly &quot;settled&quot; or &quot;authed&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The date and time of the last change to the payment adjustment in epoch seconds.</summary>
        public int? UpdatedTimestamp { get; set; }
        /// <summary>The date and time of the last change to the payment adjustment in epoch seconds.</summary>
        public int? UpdateTimestamp { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Payment"/> and sets the default values.
        /// </summary>
        public Payment()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Payment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Payment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Payment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adjusted_fees", n => { AdjustedFees = n.GetObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>(global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money.CreateFromDiscriminatorValue); } },
                { "adjusted_gross", n => { AdjustedGross = n.GetObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>(global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money.CreateFromDiscriminatorValue); } },
                { "adjusted_net", n => { AdjustedNet = n.GetObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>(global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money.CreateFromDiscriminatorValue); } },
                { "amount_fees", n => { AmountFees = n.GetObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>(global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money.CreateFromDiscriminatorValue); } },
                { "amount_gross", n => { AmountGross = n.GetObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>(global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money.CreateFromDiscriminatorValue); } },
                { "amount_net", n => { AmountNet = n.GetObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>(global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money.CreateFromDiscriminatorValue); } },
                { "billing_address_id", n => { BillingAddressId = n.GetIntValue(); } },
                { "buyer_currency", n => { BuyerCurrency = n.GetStringValue(); } },
                { "buyer_user_id", n => { BuyerUserId = n.GetLongValue(); } },
                { "create_timestamp", n => { CreateTimestamp = n.GetIntValue(); } },
                { "created_timestamp", n => { CreatedTimestamp = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "payment_adjustments", n => { PaymentAdjustments = n.GetCollectionOfObjectValues<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.PaymentAdjustment>(global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.PaymentAdjustment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "payment_id", n => { PaymentId = n.GetLongValue(); } },
                { "posted_fees", n => { PostedFees = n.GetObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>(global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money.CreateFromDiscriminatorValue); } },
                { "posted_gross", n => { PostedGross = n.GetObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>(global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money.CreateFromDiscriminatorValue); } },
                { "posted_net", n => { PostedNet = n.GetObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>(global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money.CreateFromDiscriminatorValue); } },
                { "receipt_id", n => { ReceiptId = n.GetLongValue(); } },
                { "shipped_timestamp", n => { ShippedTimestamp = n.GetIntValue(); } },
                { "shipping_address_id", n => { ShippingAddressId = n.GetLongValue(); } },
                { "shipping_user_id", n => { ShippingUserId = n.GetLongValue(); } },
                { "shop_currency", n => { ShopCurrency = n.GetStringValue(); } },
                { "shop_id", n => { ShopId = n.GetLongValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "update_timestamp", n => { UpdateTimestamp = n.GetIntValue(); } },
                { "updated_timestamp", n => { UpdatedTimestamp = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>("adjusted_fees", AdjustedFees);
            writer.WriteObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>("adjusted_gross", AdjustedGross);
            writer.WriteObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>("adjusted_net", AdjustedNet);
            writer.WriteObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>("amount_fees", AmountFees);
            writer.WriteObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>("amount_gross", AmountGross);
            writer.WriteObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>("amount_net", AmountNet);
            writer.WriteIntValue("billing_address_id", BillingAddressId);
            writer.WriteStringValue("buyer_currency", BuyerCurrency);
            writer.WriteLongValue("buyer_user_id", BuyerUserId);
            writer.WriteIntValue("created_timestamp", CreatedTimestamp);
            writer.WriteIntValue("create_timestamp", CreateTimestamp);
            writer.WriteStringValue("currency", Currency);
            writer.WriteCollectionOfObjectValues<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.PaymentAdjustment>("payment_adjustments", PaymentAdjustments);
            writer.WriteLongValue("payment_id", PaymentId);
            writer.WriteObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>("posted_fees", PostedFees);
            writer.WriteObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>("posted_gross", PostedGross);
            writer.WriteObjectValue<global::DevTKSS.MyManufacturerERP.Clients.Etsy.Models.Money>("posted_net", PostedNet);
            writer.WriteLongValue("receipt_id", ReceiptId);
            writer.WriteIntValue("shipped_timestamp", ShippedTimestamp);
            writer.WriteLongValue("shipping_address_id", ShippingAddressId);
            writer.WriteLongValue("shipping_user_id", ShippingUserId);
            writer.WriteStringValue("shop_currency", ShopCurrency);
            writer.WriteLongValue("shop_id", ShopId);
            writer.WriteStringValue("status", Status);
            writer.WriteIntValue("updated_timestamp", UpdatedTimestamp);
            writer.WriteIntValue("update_timestamp", UpdateTimestamp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
